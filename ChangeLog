CHANGES
=======

* minor fix on layout
* Fixing minor bug in int > str conversion
* Added the functions for image folder creation
* Added real coordinates lines
* New elements to widgets added
* Arranged the aspect ratio of the image
* Added the canvas method for drawing rectangles over the image
* Removed the add lines button
* Modified the sorting algorithm
* New sort button added
* New buttons added changed \_ to -
* New styles and new buttons are added
* Added new elements to layout and added rendered output
* Fix extractor check for empty lines
* fix regression of pytorch merge in script detection
* Add beam search decoder
* CTC code formatting
* Fix get\_schedaffinity in kraken.py
* Update ALTO output to 4.0
* Update documentation for kraken 1.0
* dump python 3.4
* install pytorch in travis
* More travis fixes
* fix test setup
* Fix mirroring of some weak code points ([{}])
* Some code points don't have a name
* Add whitespace normalization switch to ketos extract
* ketos: check for exceptions in test set
* correctly raise on empty text line in gtdataset even without transforms
* bump trial iteration log to info level
* Also raise for empty text in GTDataSet.add
* show default values in ketos extract
* debug logging in dataset
* Add coremltools to requirements file
* Refactor RNN deserialization with local functions
* Move default model in detect\_scripts to function definition
* Use torch.set\_num\_threads to limit parallelization
* show default values in kraken help prompt
* Add early/dumb stopping switch to ketos
* EarlyStopping and EpochStopping
* Use method in TorchVGSLNetwork to resize output layer
* Add \`both\` codec/output layer resizing mode
* move imports around to speed up help/version in kraken
* move imports around to speed up help/version print in ketos
* Output layer resizing, add mode
* Add resize method to LinSoftmax
* Note about layer initialization in append
* Add slicing operation to ketos train + vgsl
* use model input spec when loading models in ketos
* Add argument disabling preloading in dataset
* Add explicit train/eval set switches to ketos
* Add length to progressbar in kraken cli
* Add dropout to default model spec in ketos
* Disable progress bars when running in verbose mode
* Add pytorch to requirements.txt
* Remove obsolete \_\_future\_\_ imports
* Limit minimum log level through -v switches
* Add device switches to vgsl and model
* Adapt tests to new API
* More unnoticed merge fixes
* Fix codec tests
* Clean up lib.util a bit
* Fix misresolved merge conflicts
* Log parsed layer definitions in vgsl
* Remove overlooked click.echo calls
* Wrap epochs in progressbar
* remote debugging printfs
* Switch to greedy decoder by default
* more efficient greedy decoder
* Change default optimizer to RMSprop
* Use input transform generator throughout
* Add input transform generator to dataset module
* Correctly select image mode for training
* optimizer selection in ketos
* remove codec parameter from TorchSeqRecognizer
* Fix dropout VGSL regex
* Add method returning maximum label index to codec
* Fix model loading in ketos train
* pep8 and linter modifications
* Add \_\_all\_\_ to all modules
* codec argument to TorchSeqRecognizer
* Weirdly fast CTC implementation from chainer
* new (pytorch 0.4.0) weight initialization
* Correctly split linear projection and softmax during training
* Fix infinite loop in codec
* Disable softmax in CTC output layers during training
* Pad with white instead of very dark grey
* Multiple changes in training frontend
* s/predictString/predict\_string
* Convert generator into list for torch 0.4 compat
* Missing paranthesis in load\_any
* Actually serialize backwards layer in TransposedSummarizingRNN
* Transpose input in thresholding ctc decoder
* Correctly calculate gradient in ctc
* Allow dimensionality and probability parameters for dropout
* Add Dropout to layers
* Load new format model in detect\_scripts
* s/FloatTensor/Tensor/g in vgsl.py
* Purge lstm.py of code
* s/FloatTensor/Tensor/g
* Add horizontal-lr/rl switch to ketos transcribe
* Fix namespace correction in segmenter
* Fix regression in ketos extractor

0.9.17
------

* Add option disabling horizontal line removal
* Correctly test for grayscality in rpred
* Add support CLI support for grayscale recognition
* Improved script detection post-processing
* Fix unbound error when feeding binarized images to ketos transcribe

0.9.16
------

* Add abbyyXML-like output serialization
* Add abbyyxml output switch
* ignore list for multiscript detection + padding checks
* Enable grayscale in transcription environments
* Proper unicode sandwich for i/o

0.9.15
------

* Fix type of log in ketos causing crashes on py2

0.9.14
------

* Hotfix for logger styles

0.9.13
------

* Fix undefined variable in mm\_rpred logging

0.9.12
------

* Hotfix for last release

0.9.11
------

* Check explicitly for whitespace when extracting
* Clean up TorchSeqRecognizer and add train flag
* Clean up TorchSeqRecognizer and add train flag
* Clean up TorchSeqRecognizer and add train flag
* Clean up imports
* Remove separate model loaders
* put ctc decoders in separate file
* Add pyrnn deserialization
* Add pronn loader to load\_any
* Add switch to disable gradient calculation for inference
* Split layers from VGSL plumbing module
* Add pronn deserialization to TorchVGSLModel
* Add peephole lstm pytorch implementation
* Add TorchSeqRecognizer support to rpred module
* Fix padding in ground truth data set
* Fix 1-augmentation in VGSL module
* Add TorchSeqRecognizer
* Change default model to mlmodel
* Legacy CLSTM to VGSL translation support
* ketos train with pytorch-vgsl support
* Dump codec as json into CoreML file
* CoreML serialization and deserialization
* Missing log setup module from logging branch
* Correctly merge inherited scripts in script detection
* Make all logging args unicode
* Integrate logging in cli frontends
* Add warning/error logging to exceptions
* Logging for transcription module
* logging for serialization module
* logging for rpred module
* Logging for pageseg module
* Logging for repository module
* Logging for line generator
* Whitespace
* Logging for binarization module
* Correctly subtract padding when determining bbbox

0.9.10
------

* s/break/continue

0.9.9
-----

* Serialization multiscript stability fixes
* Whitespace fixes
* line generator improvements
* functionless stash dissection commit
* More verbose exceptions in repo module
* Add network unique names to each layer in VGSL
* Remove incorrect exception in docstring
* Slightly more enlightening error msgs in ocr cmd
* Arbitrary image resizing in GroundTruthDataset
* Correct behavior of summarizing network
* Suppress warning in CenterNormalizer
* Unassigned variable in CTC exception
* Iterative GroundTruthDataset creation
* Make TransposedRNN actually work
* Make CTC loss interact more seamlessly with vgsl
* Escape inputs for codec
* Change decoder to deal with cuts and confidences
* Tests for new codec
* Not all decoder inputs are in fact printable
* Many-to-many capable codec
* Make GroundTruthContainer a pytorch dataset
* VGSL parser blocks and minor fixes
* Log domain addition in CTC

0.9.8
-----

* Addresses some doc issues from #70
* Explicit None-ness check to shut up warning
* s/transcrib/transcribe
* Fix exception in verbose output with mm recognition
* Remove superfluous whitespace
* Strip comments from html file before text extraction
* README: show CI status of master in travis badge
* Fix future warning in ketos
* github is my inter-machine git stash
* transposed rnn block for vgsl
* vgsl-ish implementation
* Compute log loss from alpha array in ctc
* misc. syntax errors in ctc loss
* python CTC loss module for pytorch
* Convert transcription prefill mode unicode to byte str

0.9.7
-----

* Rename transcrib to transcribe
* Get rid of unicode\_literals
* Note about new binary wheels and compilation

0.9.6
-----

* clstm isn't on conda
* Enable autodeploy for tags
* Re-enable distort line and fix ordering
* Use new clstm binding wheel from PyPi
* Fix line degradation model
* Add horizontal text direction switch to segmenter
* Change degradation model
* Use segmentation bboxes instead of character cuts
* Change behavior of prefill mode
* Switch to non-iterator dict accessors
* Fix highlighting in prefilled transcription envs
* s/apt-get/apt + python-pip

0.9.5
-----

* Misc. documentation updates
* Add script information to hOCR output

0.9.4
-----

* Fix default model selection without -m parameter

0.9.3
-----

* Link training manual in doc index
* Default to mono-script recognition without clstm
* Add CLI interface for multi-script recognition
* Fix decoder bug when output starts with non-zero class
* Fix predictString output length
* fixed translate\_back\_locations, stopped using translate\_back in tlstm
* workaround for diverging output of translate\_back and translate\_back\_locations
* Training and OCR in Torch now enabled in the CLI
* Fix converted model lookup
* Add script detection and multi model selector to cli
* translate\_back\_locations; tlstm now in rpred
* Legacy clstm now integrated
* added network.outputs for compatibility
* New TlstmSeqRecognizer\_legacy for compatibility with the ancient clstm version used in kraken
* new translate\_back\_locations
* Add mm\_rpred function
* Add script detection data to package
* Add detect\_script to pageseg
* Dependency info added
* CLSTM Protobuf
* Log-Softmax added, issue with max() on cuda avoided
* Imports
* New SeqRecognizer based on pytorch
* \* added a weight field to the line generator and a parameter to change it
* Close opened files in ketos transcrib
* Update pageseg docstring
* Explicitely set exports through \_\_all\_\_
* Add version switch to kraken/ketos
* Adapted to current clstm code
* Catch exception caused by empty images in pageseg
* Fix python 3.6 segmentation result regression
* Allow more data types in extract\_boxes

0.9.2
-----

* Accumulated documentation changes
* Add hocr-spec-python to test requirements
* Validate hOCR output usin hocr\_spec\_python
* Add scripts to \`\`kraken show\`\` output
* Remove daft running delta cuts from hOCR output
* Bring hOCR output in line with hOCR 1.2 spec
* Remove typo in hocr template
* Output error when trying to train from scratch
* Disable UserWarnings in kraken
* Make reorder switch in ocr cmd work
* Aaand another regression from 5eeba707
* finally fix tests
* Fix regression in rpred introduced by @5eeba707
* Make segmentation tests work with new segmenter output
* Add training alphabet field to GT class
* PEP8 compliance
* Change help messages regarding code point ordering
* Add display/logical order switch for ocr cmd
* Switch default to no reorder for linegen
* Add no-reorder/reorder switch to ketos linegen
* \* added exception handling (exception is thrown at binarization.py:nlbin)
* Add rotation switch to ketos extract
* Add vertical line support to transcription UI
* s/horizontal-lr/horizontal-tb
* Correct docstring
* Add maxcolseps to segment subcommand again
* Support 0 columns separators in pageseg
* Fixes #28
* Add correct bounding boxes to vertical recognition output
* Add vertical text support to page segmentation
* Add text direction option to kraken command
* Add writing\_mode arg to output serialization
* Fixes #32
* Remove unused function in morph module

0.9.1
-----

* Change affine transformation matrix to 1d array in normalizer

0.9.0
-----

* Make ketos great(er than python2) again
* Adapt extractor to new template
* New template using CSS image maps
* Change transcription interface code
* More descriptive (verbose) output during training
* Recalculate alphabet after repartitioning
* Add \`\`train\`\` subcommand to ketos
* Add rudimentary error report computation methods
* Add trainSequence/trainString to ClstmSeqRecognizer
* Add KrakenEncodeException/KrakenDecodeException
* Add correct check mark to kraken output
* Add GroundTruthContainer for training data
* s/x\_conf/x\_confs
* Fix import broken by s/html/serialization
* Various documentation updates
* Use json instead of pickle for serialization data
* Open pickle in binary mode
* Make README reflect some minor syntax changes
* Make hOCR output XML compliant
* Minimal tests for output serialization
* Skip initial whitespace in records for ALTO serialization
* Correct output of translate\_back\_locations to output highest value
* Add character/word confidences to ALTO output
* typo: repositories -> models
* Add preliminary support for more serialization formats
* Use is\_bitonal in page segmentation sanity check
* Binarize images in transcription()
* Robustness change in is\_bitonal
* Add is\_bitonal function to binarization module
* README: Capitalize the first letter in a sentence
* Fix exception in repository index retrieval
* Add mirroring to the prediction output
* Update README
* Switch 3.3 for 3.5 in Travis testing
* Use new packages available in conda
* Raise protobuf requirement to final release
* Use proper integral shape in binarization
* Add option to skip codepoint reordering for transcription extractor
* Add lxml to requirements file
* Add alphabet view to repository metadata display
* Remove unused template
* Add extractor for GT interface
* Escape data when downloading ground truth
* Correctly extract last class from output array
* Fix CI

0.8.0
-----

* Update documentation for new "default" case
* Jinja templating for hOCR output
* Remove smooth scrolling and make saving work
* Add legacy degradation to linegen module
* Catch UserWarning in binarization module
* Typo in transcription docstring
* Don't unload clstm model after recognition
* Make rpred BiDi- and RTL-compatible
* Add new back translation routine
* Add python-bidi to requirements
* Add helper function for proper RTL codepoint ordering
* Add transcription interface to CLI
* Remove subcommand-less invocation

0.7.7
-----

* Fix example in the documentation
* Correctly create app\_dir for retrieval
* advanced\_linegen stuff from the stash
* Add strip and max\_length option to linegen
* Add renormalization switch to ketos linegen
* Reimplement line renderers using ctypes
* Add vext.gi for linegen
* Documentation for ketos linegen
* Deal with affine transformation changing image dims
* Crop image using pillow as get\_pixel\_extents is buggy
* fontconfig template for custom fonts
* Add preliminary line degradation code
* Add ketos command for training related tasks
* Add KrakenCairoSurfaceException
* Add help texts to subcommands
* Add degradation function to linegen module
* Add per-file license headers
* Add distortion/degradation from ocropy-linegen
* First draft of pango based artifical line generation utility
* Header for linegen work

0.7.6
-----

* requests needs 'params' argument when passing parameters in url
* Check input lines for emptyness

0.7.5
-----

* Pin protobuf version
* More transcription interfac work
* Finally fix bounding boxes
* Rough transcription interface

0.7.4
-----

* Increased robustness for recognition
* Ignore the LSTM maxlen parameter

0.7.3
-----

* Correctly select confidences
* Calculate bounding boxes correctly once and for all
* Don't include class 0 cuts for bounding boxes
* Fix output location properly this time
* Fix automatic conversion of models
* Fix calculation of bounding boxes
* Fix output of segmenter
* Use app dir storage instead of "POSIX"
* Really check that image is not empty
* Ensure model directory exists before writing to it

0.7.2
-----

* Remove in-place modification causing an exception

0.7.1
-----

* Correctly decode incoming data on python 3
* Add correct click version to requirements.txt

0.7
---

* Change default model
* Make CI work again
* Update documentation for new protobuf models
* Fix tests and python 3 compatibility
* Remove h5py from requirements
* Delete erroneous protoc output
* Get rid of HDF5 models and introduce new protobuf serialization
* Add documentation to public repository
* Rename subcommand function because of collisions
* Add subcommands dealing with the model repository
* ocropy got rid of a lot of spagetti code, too

0.6.3
-----

* Make verbose output switch do something again
* Revert "Add 3.5 to CI"
* Add 3.5 to CI

0.6.2
-----

* Remove support for bz2ipped models
* Update docs

0.6.1
-----

* Rip out the parallelization code
* Buffer reads off gzipped/bzipped pyrnn model
* Add support for CLSTM models

0.6
---

* Document new behavior
* Update README with new CLI syntax
* Default to binarize/segment/ocr without subcommands
* Skip tests only supported in python 2.7 on python 3
* Raise correct exception when using python 3
* Catch all exceptions in load\_pyrnn

0.5
---

* Paralellize execution of subcommands and make them chainable
* Add Flake8 section to setup.cfg
* Armin seems to be able to keep an API consistent across releases
* Making everything PEP8 compatible again
* Smallest possible test models (6.8MB o.O)
* More tests
* Replace Lovecraftian horror that was the old download progress bar

0.4.7
-----

* Actually skip line if normalization fails
* Yield empty records when line can't be normalized

0.4.6
-----

* Raise exception when loading models failed

0.4.5
-----

* Fix off-by-one error in ocr\_record class
* Fix exception in download command

0.4.4
-----

* Unpin dependencies

0.4.3
-----

* Link to new website
* Create model directory if it doesn't already exist
* Fix minor unit64->uint64 typo
* Reduce requirements a little

0.4.2
-----

* Temporarily install Cython on Travis
* Drop six requirement

0.4.1
-----

* Add we support python 3.3. too
* Update travis file

0.4.0
-----

* Add trove classifier
* Explanatory note on python 3
* Fix version number with python 3
* Yay we're universal now
* Make unpickling on python2 possible again
* And fix python 2 bugs in click
* Futurize stage 2
* Stage 1 futurizing

0.3.4
-----

* s/.next/next()
* Remove all methods related to training as we'll switch to CLSTM soonish
* Lonely test for rpred
* Fix unbound error when no model could be found
* Add image needed for segmentation test harness
* Correct inheritance of test harness
* Tests for page segmentation/error handling
* Binarization tests
* Update .gitignore
* Error handling/tests on model loading
* Tests never worked
* Some notes on advanced use
* Revert "Tell pbr to skip stuff"
* Tell pbr to skip stuff
* gitignore
* Download HDF5 model with download command
* default model is even larger
* Docs

0.3.3
-----

* Add h5py to requirements file

0.3.2
-----

* Fix links in readme
* command line usage of HDF5 models
* Fix line normalization parameter
* Convert README to rst
* New load\_any function
* First work on an unified interface to trained models
* new tool for converting pyrnns to clstm format
* some utilities
* py3k: Add \_\_future\_\_ imports on remaining files
* py3k: Enable true division
* py3k: Wrap range, map and zip in list when necessary
* Use print function instead of statement
* Add Travis badge to readme
* Enable testing on Travis using Miniconda

0.3.1
-----

* Our wheel is not universal

0.3
---

* Remove the abomination that is native.py/nutils.py

0.2.5
-----

* Update requirements file

0.2.4
-----

* Hotfix for stupidity

0.2.3
-----

* Refactor some more code
* Preinstall of numpy is no longer necessary

0.2.2
-----

* Update requirements file

0.2.1
-----

* Add some error detection and handling to load\_rnn
* Rename invalid model exception
* Create test files
* Refactor output of rpred, add separate dewarp function

0.2.0
-----

* Complete but relatively untested hocr output
* Some preliminary hOCR output
* Calculate character bounding boxes

0.1.0
-----

* Build wheel
* Add license
* Change behavior of cli
* Update requirements.txt
* Note that python package building is a serious case of wtf
* Some more initial work
* Initial commit
